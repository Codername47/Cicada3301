<?php

namespace App\Controller\Admin;

use App\Entity\AchievedFlag;
use App\Entity\AchievedLevel;
use App\Entity\Content;
use App\Entity\ContentType;
use App\Entity\JsContent;
use App\Entity\Level;
use App\Entity\LevelFlag;
use App\Entity\LevelFlagInfo;
use App\Entity\Message;
use App\Entity\Role;
use App\Entity\User;
use App\Entity\UserInfo;
use EasyCorp\Bundle\EasyAdminBundle\Config\Action;
use EasyCorp\Bundle\EasyAdminBundle\Config\Actions;
use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;
use EasyCorp\Bundle\EasyAdminBundle\Config\Dashboard;
use EasyCorp\Bundle\EasyAdminBundle\Config\MenuItem;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractDashboardController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

class DashboardController extends AbstractDashboardController
{
    #[Route('/admin', name: 'admin')]
    public function index(): Response
    {
        return $this->render('admin/index.html.twig');

        // Option 1. You can make your dashboard redirect to some common page of your backend
        //
        // $adminUrlGenerator = $this->container->get(AdminUrlGenerator::class);
        // return $this->redirect($adminUrlGenerator->setController(OneOfYourCrudController::class)->generateUrl());

        // Option 2. You can make your dashboard redirect to different pages depending on the user
        //
        // if ('jane' === $this->getUser()->getUsername()) {
        //     return $this->redirect('...');
        // }

        // Option 3. You can render some custom template to display a proper dashboard with widgets, etc.
        // (tip: it's easier if your template extends from @EasyAdmin/page/content.html.twig)
        //
        // return $this->render('some/path/my-dashboard.html.twig');
    }

    public function configureDashboard(): Dashboard
    {
        return Dashboard::new()
            ->setTitle('Cicada');
    }

    public function configureActions(): Actions
    {
        return parent::configureActions()
            ->add(Crud::PAGE_INDEX, Action::DETAIL); // TODO: Change the autogenerated stub
    }
    public function configureMenuItems(): iterable
    {
        yield MenuItem::linkToRoute('To main menu', 'fa fa-home', 'app_user_main_menu');
        yield MenuItem::linkToCrud('Users', 'fa fa-user', User::class);
        yield MenuItem::linkToCrud('Users Info', 'fa fa-user', UserInfo::class);
        yield MenuItem::linkToCrud('Levels', 'fa fa-user', Level::class);
        yield MenuItem::linkToCrud('Flags', 'fa fa-user', LevelFlag::class);
        yield MenuItem::linkToCrud('Users Achievements', 'fa fa-user', AchievedFlag::class);
        yield MenuItem::linkToCrud('Users Reached Levels', 'fa fa-user', AchievedLevel::class);
        yield MenuItem::linkToCrud('Level Helps', 'fa fa-user', Message::class);
        yield MenuItem::linkToCrud('Content in Flags', 'fa fa-user', Content::class);
        yield MenuItem::linkToCrud('FileTypes of Content', 'fa fa-user', ContentType::class);
        yield MenuItem::linkToCrud('Flag Scripts', 'fa fa-user', JsContent::class);
        // yield MenuItem::linkToCrud('The Label', 'fas fa-list', EntityClass::class);
    }
}
