<?php

namespace App\Controller\Admin;

use App\Entity\AchievedLevel;
use App\Entity\LevelFlag;
use Doctrine\ORM\EntityManagerInterface;
use EasyCorp\Bundle\EasyAdminBundle\Config\Action;
use EasyCorp\Bundle\EasyAdminBundle\Config\Actions;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Field\ArrayField;
use EasyCorp\Bundle\EasyAdminBundle\Field\AssociationField;
use EasyCorp\Bundle\EasyAdminBundle\Field\DateField;
use EasyCorp\Bundle\EasyAdminBundle\Field\DateTimeField;
use EasyCorp\Bundle\EasyAdminBundle\Field\IdField;
use Symfony\Component\VarExporter\Exception\NotInstantiableTypeException;

class AchievedLevelCrudController extends AbstractCrudController
{
    public static function getEntityFqcn(): string
    {
        return AchievedLevel::class;
    }

    public function configureActions(Actions $actions): Actions
    {
        return $actions
            // ...
            // this will forbid to create or delete entities in the backend
            ->disable(Action::EDIT)
            ;
    }

    public function updateEntity(EntityManagerInterface $entityManager, $entityInstance): void
    {
        if (!$entityInstance instanceof AchievedLevel)
            throw new NotInstantiableTypeException("Unknown Type of AchievedLevel!");
        $entityInstance->calculateTotalTime();
        $entityManager->persist($entityInstance);
        $entityManager->flush();
        parent::updateEntity($entityManager, $entityInstance); // TODO: Change the autogenerated stub
    }

    public function persistEntity(EntityManagerInterface $entityManager, $entityInstance): void
    {
        if (!$entityInstance instanceof AchievedLevel)
            throw new NotInstantiableTypeException("Unknown Type of AchievedLevel!");
        $entityInstance->calculateTotalTime();
        $entityManager->persist($entityInstance);
        $entityManager->flush();
        parent::persistEntity($entityManager, $entityInstance);
    }

    public function deleteEntity(EntityManagerInterface $entityManager, $entityInstance): void
    {
        if (!$entityInstance instanceof AchievedLevel)
            throw new NotInstantiableTypeException("Unknown Type of AchievedLevel!");
        $currentUser = $entityInstance->getUser();
        $gettedFlags = $currentUser->getAchievedFlags();
        foreach ($gettedFlags as $flag)
        {
            if($flag->getLevelFlag()->getLevel() === $entityInstance->getLevel())
                $currentUser->removeAchievedFlag($flag);
        }
        $entityManager->flush();
        parent::deleteEntity($entityManager, $entityInstance); // TODO: Change the autogenerated stub
    }

    public function configureFields(string $pageName): iterable
    {
        yield IdField::new('id')
            ->hideOnForm();
        yield AssociationField::new('user')->autocomplete();
        yield AssociationField::new('level', 'Level')
            ->autocomplete()
            ->formatValue(function ($value, $entity){
                return $entity->getLevel()->getName();
            });
        yield ArrayField::new('totalTime')->onlyOnIndex();
        yield DateTimeField::new('dateAchieve')->hideOnForm();

    }
}
