<?php

namespace App\Controller\Admin;

use App\Entity\User;
use App\Entity\UserInfo;
use App\Repository\UserRepository;
use Doctrine\Common\Collections\Criteria;
use Doctrine\ORM\EntityManagerInterface;
use EasyCorp\Bundle\EasyAdminBundle\Config\Action;
use EasyCorp\Bundle\EasyAdminBundle\Config\Actions;
use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Field\ArrayField;
use EasyCorp\Bundle\EasyAdminBundle\Field\AssociationField;
use EasyCorp\Bundle\EasyAdminBundle\Field\BooleanField;
use EasyCorp\Bundle\EasyAdminBundle\Field\DateTimeField;
use EasyCorp\Bundle\EasyAdminBundle\Field\EmailField;
use EasyCorp\Bundle\EasyAdminBundle\Field\Field;
use EasyCorp\Bundle\EasyAdminBundle\Field\IdField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;
use Symfony\Component\Security\Core\Security;

class UserCrudController extends AbstractCrudController
{
    protected UserRepository $repo;
    protected Security $security;

    public static function getEntityFqcn(): string
    {
        return User::class;
    }


    public function __construct(UserRepository $userRepository, Security $security)
    {
        $this->security = $security;
        $this->repo = $userRepository;
    }

    public function createEntity(string $entityFqcn)
    {
        $user = new User();
        $user->setUserInfo(new UserInfo());

        return $user; // TODO: Change the autogenerated stub
    }

    public function updateEntity(EntityManagerInterface $entityManager, $entityInstance): void
    {
        if (($this->security->getUser()->getId() == $entityInstance->getId() && !in_array('ROLE_ADMIN', $entityInstance->getRoles()) ))
        {
            $this->addFlash("error", "You Can't Remove your Admin Role");
            return;
        }
        $this->updatePassword($entityInstance);
        parent::updateEntity($entityManager, $entityInstance); // TODO: Change the autogenerated stub
    }

    public function persistEntity(EntityManagerInterface $entityManager, $entityInstance): void
    {
        if ((count($entityManager->getRepository(User::class)->findAll()) != 0) && ($this->security->getUser()->getId() == $entityInstance->getId() && !in_array('ROLE_ADMIN', $entityInstance->getRoles()) ))
        {
            $this->addFlash("error", "You Can't modify Yourself");
            return;
        }
        $this->updatePassword($entityInstance);
        parent::persistEntity($entityManager, $entityInstance);
    }
    public function deleteEntity(EntityManagerInterface $entityManager, $entityInstance): void
    {
        if ($this->security->getUser()->getId() == $entityInstance->getId())
        {
            $this->addFlash("error", "You Can't delete Yourself");
            return;
        }
        parent::deleteEntity($entityManager, $entityInstance); // TODO: Change the autogenerated stub
    }

    public function updatePassword(User $user): void
    {
        if ($user->getPlainPassword() == '') return;
        $this->repo->upgradePassword($user, $user->getPlainPassword());
        $user->eraseCredentials();
    }

    public function configureFields(string $pageName): iterable
    {
        yield IdField::new('id')
            ->hideOnForm();
        yield TextField::new('username');
        yield ArrayField::new('roles')->setHelp("Only granted ROLE_USER, ROLE_ADMIN");
        yield EmailField::new('email');
        yield TextField::new('plainPassword')
            ->onlyOnForms()
            ->setLabel("Password")
            ->setRequired(true);
        yield TextField::new('plainPassword')->onlyOnForms()->setLabel("Password")->onlyWhenUpdating();
        yield BooleanField::new('isVerified')->renderAsSwitch(false);
        yield DateTimeField::new('lastOnline')->hideOnForm();
        yield Field::new('maxLvl')->hideOnForm();
        yield TextField::new('LastFlag')->hideOnForm();
        yield AssociationField::new('achievedLevels')
            ->hideWhenCreating()
            ->hideOnForm()
            ->setFormTypeOption('choice_label', 'level')
            ->setFormTypeOption('by_reference', false);
    }


}
